# =============================================================================
# TMUX CONFIGURATION - WSL2 + Alacritty + Neovim Integration
# =============================================================================

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                         CORE SETTINGS & PERFORMANCE                        │
# └─────────────────────────────────────────────────────────────────────────────┘
set -g mouse on
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",alacritty:RGB"
set -sg escape-time 10
set -g focus-events on
set -g automatic-rename on
setw -g mode-keys vi
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -g history-limit 10000

# WSL2 specific optimizations
set -g status-interval 5
set -g display-time 4000
set -g display-panes-time 2000

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                        NEOVIM INTEGRATION                                  │
# └─────────────────────────────────────────────────────────────────────────────┘
# Smart pane switching with awareness of Neovim splits
vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                      WSL2 CLIPBOARD INTEGRATION                            │
# └─────────────────────────────────────────────────────────────────────────────┘
bind v copy-mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle

bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -selection clipboard -i"
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xclip -selection clipboard -i"

bind p run-shell "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                    PROJECT-FOCUSED WORKFLOW BINDINGS                       │
# └─────────────────────────────────────────────────────────────────────────────┘

# SESSION MANAGEMENT - Project organization
bind S new-session -c "#{pane_current_path}"
bind s choose-session -Z
bind K confirm-before -p "Kill session #S? (y/n)" kill-session
bind R command-prompt -I "#S" "rename-session '%%'"

# PROJECT TEMPLATES - Quick project setup
bind P command-prompt -p "Project name:" \
    "new-session -d -s '%%' -c '~/projects/%%'; \
     new-window -t '%%':2 -n 'editor' -c '~/projects/%%'; \
     new-window -t '%%':3 -n 'server' -c '~/projects/%%'; \
     new-window -t '%%':4 -n 'logs' -c '~/projects/%%'; \

     select-window -t '%%':1; \
     switch-client -t '%%'"

# WINDOW MANAGEMENT - Context-aware

bind c new-window -c "#{pane_current_path}"
bind W command-prompt -I "#W" "rename-window '%%'"
bind h previous-window
bind l next-window

bind b last-window


# PANE MANAGEMENT - Development-focused
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind x kill-pane
bind z resize-pane -Z

bind r rotate-window

# QUICK LAYOUTS for development

bind M-1 select-layout even-horizontal
bind M-2 select-layout even-vertical
bind M-3 select-layout main-horizontal
bind M-4 select-layout main-vertical
bind M-5 select-layout tiled

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                              PLUGINS (TPM)                                 │
# └─────────────────────────────────────────────────────────────────────────────┘
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'dracula/tmux'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'kdheepak/lazygit.nvim'

# ┌─────────────────────────────────────────────────────────────────────────────┐

# │                            PLUGIN CONFIGURATION                            │
# └─────────────────────────────────────────────────────────────────────────────┘
# Dracula theme - Development focused
set -g @dracula-plugins "cpu-usage ram-usage git time"
set -g @dracula-show-powerline true
set -g @dracula-show-left-icon "session"
set -g @dracula-show-left-sep ""
set -g @dracula-show-right-sep ""
set -g @dracula-cpu-usage-label "CPU"
set -g @dracula-ram-usage-label "RAM"

set -g @dracula-show-timezone false
set -g @dracula-day-month true
set -g @dracula-time-format "%H:%M"

# Session persistence - Project aware
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-dir '~/.tmux/resurrect'
set -g @continuum-automatic-restore 'on'
set -g @continuum-save-interval '15'

# Lazygit popup
bind g popup -d '#{pane_current_path}' -xC -yC -w80% -h80% -E lazygit
bind G new-window -n lazygit -c '#{pane_current_path}' lazygit

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                          MOUSE & ALACRITTY OPTIMIZATIONS                   │
# └─────────────────────────────────────────────────────────────────────────────┘
# Enhanced mouse support
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi C-WheelUpPane send-keys -X halfpage-up
bind -T copy-mode-vi C-WheelDownPane send-keys -X halfpage-down

# Double click to select word
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell "sleep .1s" \; send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"

# ┌─────────────────────────────────────────────────────────────────────────────┐
# │                          STATUS LINE & APPEARANCE                          │
# └─────────────────────────────────────────────────────────────────────────────┘
set-window-option -g window-status-format \
  '#[fg=#f8f8f2,bg=#44475a] #{window_nerd_icon} #I #W'
set-window-option -g window-status-current-format \
  '#[fg=#44475a,bg=#6272a4]#[fg=#f8f8f2,bg=#6272a4] #{window_nerd_icon} #I #W #[fg=#6272a4,bg=#44475a]'

# Pane borders
set -g pane-border-style 'fg=#44475a'
set -g pane-active-border-style 'fg=#6272a4'


# Initialize TPM (keep at bottom)
run -b '~/.tmux/plugins/tpm/tpm'
